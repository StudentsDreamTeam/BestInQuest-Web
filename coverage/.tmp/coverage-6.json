{"C:/BestInQuest-Web/src/features/tasks/components/CreateTaskForm.jsx":{"path":"C:/BestInQuest-Web/src/features/tasks/components/CreateTaskForm.jsx","statementMap":{"0":{"start":{"line":6,"column":19},"end":{"line":6,"column":28}},"1":{"start":{"line":7,"column":22},"end":{"line":7,"column":32}},"2":{"start":{"line":8,"column":28},"end":{"line":20,"column":3}},"3":{"start":{"line":21,"column":29},"end":{"line":44,"column":3}},"4":{"start":{"line":22,"column":4},"end":{"line":25,"column":5}},"5":{"start":{"line":23,"column":6},"end":{"line":23,"column":60}},"6":{"start":{"line":24,"column":6},"end":{"line":24,"column":13}},"7":{"start":{"line":26,"column":37},"end":{"line":30,"column":5}},"8":{"start":{"line":31,"column":26},"end":{"line":37,"column":5}},"9":{"start":{"line":38,"column":4},"end":{"line":43,"column":5}},"10":{"start":{"line":39,"column":6},"end":{"line":39,"column":35}},"11":{"start":{"line":40,"column":6},"end":{"line":40,"column":16}},"12":{"start":{"line":42,"column":6},"end":{"line":42,"column":65}},"13":{"start":{"line":45,"column":2},"end":{"line":47,"column":3}},"14":{"start":{"line":46,"column":4},"end":{"line":46,"column":95}},"15":{"start":{"line":48,"column":2},"end":{"line":57,"column":4}}},"fnMap":{"0":{"name":"CreateTaskForm","decl":{"start":{"line":5,"column":24},"end":{"line":5,"column":38}},"loc":{"start":{"line":5,"column":52},"end":{"line":58,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":21,"column":29},"end":{"line":21,"column":30}},"loc":{"start":{"line":21,"column":57},"end":{"line":44,"column":3}},"line":21}},"branchMap":{"0":{"loc":{"start":{"line":22,"column":4},"end":{"line":25,"column":5}},"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":25,"column":5}},{"start":{},"end":{}}],"line":22},"1":{"loc":{"start":{"line":45,"column":2},"end":{"line":47,"column":3}},"type":"if","locations":[{"start":{"line":45,"column":2},"end":{"line":47,"column":3}},{"start":{},"end":{}}],"line":45}},"s":{"0":5,"1":5,"2":5,"3":5,"4":2,"5":0,"6":0,"7":2,"8":2,"9":2,"10":2,"11":1,"12":1,"13":5,"14":1,"15":4},"f":{"0":5,"1":2},"b":{"0":[0,2],"1":[1,4]},"inputSourceMap":{"version":3,"sources":["C:/BestInQuest-Web/src/features/tasks/components/CreateTaskForm.jsx"],"sourcesContent":["import TaskFormBase from './TaskFormBase';\r\nimport { useUser } from '../../../contexts/UserContext';\r\nimport { useTasks } from '../../../contexts/TasksContext';\r\nimport { STATUS_OPTIONS_MAP } from '../../../constants';\r\n\r\nexport default function CreateTaskForm({ onClose }) {\r\n  const { user } = useUser();\r\n  const { addTask } = useTasks();\r\n\r\n  const defaultCreateData = {\r\n    title: '',\r\n    description: '',\r\n    sphere: '',\r\n    // priority и difficulty будут взяты из TaskFormBase по умолчанию\r\n    deadline: '',\r\n    duration: 3600,\r\n    fastDoneBonus: 0,\r\n    combo: false,\r\n    rewardXp: 100,\r\n    rewardCurrency: 10,\r\n    linkedTaskId: 0,\r\n  };\r\n\r\n  const handleCreateSubmit = async (formDataFromBase) => {\r\n    if (!user) {\r\n        console.error(\"User not available for task creation\");\r\n        return;\r\n    }\r\n\r\n    const authorAndExecutorDetails = {\r\n      id: user.id,\r\n      name: user.name,\r\n      email: user.email,\r\n    };\r\n\r\n    const finalTaskData = {\r\n      ...formDataFromBase,\r\n      status: STATUS_OPTIONS_MAP.NEW,\r\n      author: authorAndExecutorDetails,\r\n      executor: authorAndExecutorDetails,\r\n      // updateDate будет установлен на сервере\r\n    };\r\n\r\n    try {\r\n        await addTask(finalTaskData);\r\n        onClose();\r\n    } catch (error) {\r\n        console.error(\"CreateTaskForm: Failed to add task\", error);\r\n    }\r\n  };\r\n\r\n  if (!user) {\r\n      return <div>Загрузка данных пользователя...</div>;\r\n  }\r\n\r\n  return (\r\n    <TaskFormBase\r\n      initialTaskData={defaultCreateData}\r\n      onSubmitForm={handleCreateSubmit}\r\n      onCloseForm={onClose}\r\n      isUpdateForm={false}\r\n      loggedInUser={user}\r\n    />\r\n  );\r\n}"],"mappings":"AAAA,OAAO,kBAAkB;AACzB,SAAS,eAAe;AACxB,SAAS,gBAAgB;AACzB,SAAS,0BAA0B;AAEnC,wBAAwB,eAAe,EAAE,QAAQ,GAAG;AAClD,QAAM,EAAE,KAAK,IAAI,QAAQ;AACzB,QAAM,EAAE,QAAQ,IAAI,SAAS;AAE7B,QAAM,oBAAoB;AAAA,IACxB,OAAO;AAAA,IACP,aAAa;AAAA,IACb,QAAQ;AAAA;AAAA,IAER,UAAU;AAAA,IACV,UAAU;AAAA,IACV,eAAe;AAAA,IACf,OAAO;AAAA,IACP,UAAU;AAAA,IACV,gBAAgB;AAAA,IAChB,cAAc;AAAA,EAChB;AAEA,QAAM,qBAAqB,OAAO,qBAAqB;AACrD,QAAI,CAAC,MAAM;AACP,cAAQ,MAAM,sCAAsC;AACpD;AAAA,IACJ;AAEA,UAAM,2BAA2B;AAAA,MAC/B,IAAI,KAAK;AAAA,MACT,MAAM,KAAK;AAAA,MACX,OAAO,KAAK;AAAA,IACd;AAEA,UAAM,gBAAgB;AAAA,MACpB,GAAG;AAAA,MACH,QAAQ,mBAAmB;AAAA,MAC3B,QAAQ;AAAA,MACR,UAAU;AAAA;AAAA,IAEZ;AAEA,QAAI;AACA,YAAM,QAAQ,aAAa;AAC3B,cAAQ;AAAA,IACZ,SAAS,OAAO;AACZ,cAAQ,MAAM,sCAAsC,KAAK;AAAA,IAC7D;AAAA,EACF;AAEA,MAAI,CAAC,MAAM;AACP,WAAO,oCAAC,aAAI,iCAA+B;AAAA,EAC/C;AAEA,SACE;AAAA,IAAC;AAAA;AAAA,MACC,iBAAiB;AAAA,MACjB,cAAc;AAAA,MACd,aAAa;AAAA,MACb,cAAc;AAAA,MACd,cAAc;AAAA;AAAA,EAChB;AAEJ;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"5f2b8e7754a543604c41211800b3f41712f3e61a"}}