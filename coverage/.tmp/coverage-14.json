{"C:/BestInQuest-Web/src/contexts/TasksContext.jsx":{"path":"C:/BestInQuest-Web/src/contexts/TasksContext.jsx","statementMap":{"0":{"start":{"line":11,"column":21},"end":{"line":11,"column":36}},"1":{"start":{"line":13,"column":2},"end":{"line":13,"column":34}},"2":{"start":{"line":16,"column":34},"end":{"line":16,"column":43}},"3":{"start":{"line":17,"column":28},"end":{"line":17,"column":40}},"4":{"start":{"line":18,"column":36},"end":{"line":18,"column":50}},"5":{"start":{"line":19,"column":28},"end":{"line":19,"column":42}},"6":{"start":{"line":20,"column":20},"end":{"line":35,"column":8}},"7":{"start":{"line":21,"column":4},"end":{"line":21,"column":24}},"8":{"start":{"line":21,"column":17},"end":{"line":21,"column":24}},"9":{"start":{"line":22,"column":4},"end":{"line":22,"column":23}},"10":{"start":{"line":23,"column":4},"end":{"line":23,"column":19}},"11":{"start":{"line":24,"column":4},"end":{"line":34,"column":5}},"12":{"start":{"line":25,"column":23},"end":{"line":25,"column":55}},"13":{"start":{"line":26,"column":6},"end":{"line":26,"column":25}},"14":{"start":{"line":27,"column":6},"end":{"line":27,"column":50}},"15":{"start":{"line":29,"column":6},"end":{"line":29,"column":48}},"16":{"start":{"line":30,"column":6},"end":{"line":30,"column":26}},"17":{"start":{"line":31,"column":6},"end":{"line":31,"column":19}},"18":{"start":{"line":33,"column":6},"end":{"line":33,"column":26}},"19":{"start":{"line":36,"column":2},"end":{"line":48,"column":39}},"20":{"start":{"line":37,"column":4},"end":{"line":47,"column":5}},"21":{"start":{"line":38,"column":6},"end":{"line":38,"column":25}},"22":{"start":{"line":39,"column":11},"end":{"line":47,"column":5}},"23":{"start":{"line":40,"column":6},"end":{"line":40,"column":26}},"24":{"start":{"line":41,"column":6},"end":{"line":41,"column":74}},"25":{"start":{"line":42,"column":6},"end":{"line":42,"column":19}},"26":{"start":{"line":43,"column":11},"end":{"line":47,"column":5}},"27":{"start":{"line":44,"column":6},"end":{"line":44,"column":25}},"28":{"start":{"line":45,"column":6},"end":{"line":45,"column":19}},"29":{"start":{"line":46,"column":6},"end":{"line":46,"column":21}},"30":{"start":{"line":49,"column":18},"end":{"line":68,"column":3}},"31":{"start":{"line":50,"column":4},"end":{"line":52,"column":5}},"32":{"start":{"line":51,"column":6},"end":{"line":51,"column":65}},"33":{"start":{"line":53,"column":4},"end":{"line":53,"column":19}},"34":{"start":{"line":54,"column":4},"end":{"line":67,"column":5}},"35":{"start":{"line":55,"column":22},"end":{"line":55,"column":68}},"36":{"start":{"line":56,"column":6},"end":{"line":59,"column":8}},"37":{"start":{"line":57,"column":23},"end":{"line":57,"column":46}},"38":{"start":{"line":60,"column":6},"end":{"line":60,"column":44}},"39":{"start":{"line":61,"column":6},"end":{"line":61,"column":21}},"40":{"start":{"line":63,"column":6},"end":{"line":63,"column":46}},"41":{"start":{"line":64,"column":6},"end":{"line":64,"column":26}},"42":{"start":{"line":65,"column":6},"end":{"line":65,"column":14}},"43":{"start":{"line":69,"column":21},"end":{"line":97,"column":3}},"44":{"start":{"line":70,"column":4},"end":{"line":72,"column":5}},"45":{"start":{"line":71,"column":6},"end":{"line":71,"column":65}},"46":{"start":{"line":73,"column":4},"end":{"line":96,"column":5}},"47":{"start":{"line":74,"column":27},"end":{"line":74,"column":61}},"48":{"start":{"line":74,"column":45},"end":{"line":74,"column":60}},"49":{"start":{"line":75,"column":6},"end":{"line":75,"column":89}},"50":{"start":{"line":75,"column":25},"end":{"line":75,"column":89}},"51":{"start":{"line":76,"column":28},"end":{"line":83,"column":7}},"52":{"start":{"line":84,"column":26},"end":{"line":84,"column":77}},"53":{"start":{"line":85,"column":6},"end":{"line":88,"column":8}},"54":{"start":{"line":86,"column":23},"end":{"line":86,"column":78}},"55":{"start":{"line":86,"column":44},"end":{"line":86,"column":77}},"56":{"start":{"line":89,"column":6},"end":{"line":89,"column":48}},"57":{"start":{"line":90,"column":6},"end":{"line":90,"column":25}},"58":{"start":{"line":92,"column":6},"end":{"line":92,"column":59}},"59":{"start":{"line":93,"column":6},"end":{"line":93,"column":26}},"60":{"start":{"line":94,"column":6},"end":{"line":94,"column":14}},"61":{"start":{"line":98,"column":21},"end":{"line":112,"column":3}},"62":{"start":{"line":99,"column":4},"end":{"line":101,"column":5}},"63":{"start":{"line":100,"column":6},"end":{"line":100,"column":65}},"64":{"start":{"line":102,"column":4},"end":{"line":111,"column":5}},"65":{"start":{"line":103,"column":6},"end":{"line":103,"column":43}},"66":{"start":{"line":104,"column":6},"end":{"line":104,"column":72}},"67":{"start":{"line":104,"column":30},"end":{"line":104,"column":70}},"68":{"start":{"line":104,"column":54},"end":{"line":104,"column":69}},"69":{"start":{"line":105,"column":6},"end":{"line":105,"column":43}},"70":{"start":{"line":107,"column":6},"end":{"line":107,"column":59}},"71":{"start":{"line":108,"column":6},"end":{"line":108,"column":26}},"72":{"start":{"line":109,"column":6},"end":{"line":109,"column":14}},"73":{"start":{"line":113,"column":27},"end":{"line":146,"column":3}},"74":{"start":{"line":114,"column":4},"end":{"line":117,"column":5}},"75":{"start":{"line":115,"column":6},"end":{"line":115,"column":69}},"76":{"start":{"line":116,"column":6},"end":{"line":116,"column":13}},"77":{"start":{"line":118,"column":17},"end":{"line":118,"column":51}},"78":{"start":{"line":118,"column":35},"end":{"line":118,"column":50}},"79":{"start":{"line":119,"column":4},"end":{"line":122,"column":5}},"80":{"start":{"line":120,"column":6},"end":{"line":120,"column":75}},"81":{"start":{"line":121,"column":6},"end":{"line":121,"column":13}},"82":{"start":{"line":123,"column":31},"end":{"line":123,"column":59}},"83":{"start":{"line":124,"column":27},"end":{"line":124,"column":124}},"84":{"start":{"line":125,"column":26},"end":{"line":125,"column":54}},"85":{"start":{"line":125,"column":44},"end":{"line":125,"column":52}},"86":{"start":{"line":126,"column":4},"end":{"line":131,"column":6}},"87":{"start":{"line":127,"column":21},"end":{"line":129,"column":7}},"88":{"start":{"line":128,"column":15},"end":{"line":128,"column":125}},"89":{"start":{"line":132,"column":4},"end":{"line":145,"column":5}},"90":{"start":{"line":133,"column":6},"end":{"line":133,"column":21}},"91":{"start":{"line":134,"column":33},"end":{"line":134,"column":68}},"92":{"start":{"line":135,"column":33},"end":{"line":135,"column":95}},"93":{"start":{"line":136,"column":6},"end":{"line":139,"column":8}},"94":{"start":{"line":137,"column":23},"end":{"line":137,"column":149}},"95":{"start":{"line":137,"column":44},"end":{"line":137,"column":84}},"96":{"start":{"line":137,"column":101},"end":{"line":137,"column":148}},"97":{"start":{"line":140,"column":6},"end":{"line":140,"column":72}},"98":{"start":{"line":142,"column":6},"end":{"line":142,"column":31}},"99":{"start":{"line":143,"column":6},"end":{"line":143,"column":71}},"100":{"start":{"line":144,"column":6},"end":{"line":144,"column":94}},"101":{"start":{"line":144,"column":44},"end":{"line":144,"column":91}},"102":{"start":{"line":147,"column":16},"end":{"line":156,"column":3}},"103":{"start":{"line":155,"column":23},"end":{"line":155,"column":60}},"104":{"start":{"line":157,"column":2},"end":{"line":157,"column":89}}},"fnMap":{"0":{"name":"useTasks","decl":{"start":{"line":12,"column":16},"end":{"line":12,"column":24}},"loc":{"start":{"line":12,"column":27},"end":{"line":14,"column":1}},"line":12},"1":{"name":"TasksProvider","decl":{"start":{"line":15,"column":16},"end":{"line":15,"column":29}},"loc":{"start":{"line":15,"column":44},"end":{"line":158,"column":1}},"line":15},"2":{"name":"(anonymous_2)","decl":{"start":{"line":20,"column":32},"end":{"line":20,"column":33}},"loc":{"start":{"line":20,"column":50},"end":{"line":35,"column":3}},"line":20},"3":{"name":"(anonymous_3)","decl":{"start":{"line":36,"column":12},"end":{"line":36,"column":13}},"loc":{"start":{"line":36,"column":18},"end":{"line":48,"column":3}},"line":36},"4":{"name":"(anonymous_4)","decl":{"start":{"line":49,"column":18},"end":{"line":49,"column":19}},"loc":{"start":{"line":49,"column":46},"end":{"line":68,"column":3}},"line":49},"5":{"name":"(anonymous_5)","decl":{"start":{"line":57,"column":8},"end":{"line":57,"column":9}},"loc":{"start":{"line":57,"column":23},"end":{"line":57,"column":46}},"line":57},"6":{"name":"(anonymous_6)","decl":{"start":{"line":69,"column":21},"end":{"line":69,"column":22}},"loc":{"start":{"line":69,"column":57},"end":{"line":97,"column":3}},"line":69},"7":{"name":"(anonymous_7)","decl":{"start":{"line":74,"column":38},"end":{"line":74,"column":39}},"loc":{"start":{"line":74,"column":45},"end":{"line":74,"column":60}},"line":74},"8":{"name":"(anonymous_8)","decl":{"start":{"line":86,"column":8},"end":{"line":86,"column":9}},"loc":{"start":{"line":86,"column":23},"end":{"line":86,"column":78}},"line":86},"9":{"name":"(anonymous_9)","decl":{"start":{"line":86,"column":37},"end":{"line":86,"column":38}},"loc":{"start":{"line":86,"column":44},"end":{"line":86,"column":77}},"line":86},"10":{"name":"(anonymous_10)","decl":{"start":{"line":98,"column":21},"end":{"line":98,"column":22}},"loc":{"start":{"line":98,"column":39},"end":{"line":112,"column":3}},"line":98},"11":{"name":"(anonymous_11)","decl":{"start":{"line":104,"column":15},"end":{"line":104,"column":16}},"loc":{"start":{"line":104,"column":30},"end":{"line":104,"column":70}},"line":104},"12":{"name":"(anonymous_12)","decl":{"start":{"line":104,"column":47},"end":{"line":104,"column":48}},"loc":{"start":{"line":104,"column":54},"end":{"line":104,"column":69}},"line":104},"13":{"name":"(anonymous_13)","decl":{"start":{"line":113,"column":27},"end":{"line":113,"column":28}},"loc":{"start":{"line":113,"column":60},"end":{"line":146,"column":3}},"line":113},"14":{"name":"(anonymous_14)","decl":{"start":{"line":118,"column":28},"end":{"line":118,"column":29}},"loc":{"start":{"line":118,"column":35},"end":{"line":118,"column":50}},"line":118},"15":{"name":"(anonymous_15)","decl":{"start":{"line":125,"column":36},"end":{"line":125,"column":37}},"loc":{"start":{"line":125,"column":44},"end":{"line":125,"column":52}},"line":125},"16":{"name":"(anonymous_16)","decl":{"start":{"line":127,"column":6},"end":{"line":127,"column":7}},"loc":{"start":{"line":127,"column":21},"end":{"line":129,"column":7}},"line":127},"17":{"name":"(anonymous_17)","decl":{"start":{"line":128,"column":8},"end":{"line":128,"column":9}},"loc":{"start":{"line":128,"column":15},"end":{"line":128,"column":125}},"line":128},"18":{"name":"(anonymous_18)","decl":{"start":{"line":137,"column":8},"end":{"line":137,"column":9}},"loc":{"start":{"line":137,"column":23},"end":{"line":137,"column":149}},"line":137},"19":{"name":"(anonymous_19)","decl":{"start":{"line":137,"column":37},"end":{"line":137,"column":38}},"loc":{"start":{"line":137,"column":44},"end":{"line":137,"column":84}},"line":137},"20":{"name":"(anonymous_20)","decl":{"start":{"line":137,"column":91},"end":{"line":137,"column":92}},"loc":{"start":{"line":137,"column":101},"end":{"line":137,"column":148}},"line":137},"21":{"name":"(anonymous_21)","decl":{"start":{"line":144,"column":34},"end":{"line":144,"column":35}},"loc":{"start":{"line":144,"column":44},"end":{"line":144,"column":91}},"line":144},"22":{"name":"(anonymous_22)","decl":{"start":{"line":155,"column":17},"end":{"line":155,"column":18}},"loc":{"start":{"line":155,"column":23},"end":{"line":155,"column":60}},"line":155}},"branchMap":{"0":{"loc":{"start":{"line":21,"column":4},"end":{"line":21,"column":24}},"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":21,"column":24}},{"start":{},"end":{}}],"line":21},"1":{"loc":{"start":{"line":37,"column":4},"end":{"line":47,"column":5}},"type":"if","locations":[{"start":{"line":37,"column":4},"end":{"line":47,"column":5}},{"start":{"line":39,"column":11},"end":{"line":47,"column":5}}],"line":37},"2":{"loc":{"start":{"line":37,"column":8},"end":{"line":37,"column":23}},"type":"binary-expr","locations":[{"start":{"line":37,"column":8},"end":{"line":37,"column":12}},{"start":{"line":37,"column":16},"end":{"line":37,"column":23}}],"line":37},"3":{"loc":{"start":{"line":39,"column":11},"end":{"line":47,"column":5}},"type":"if","locations":[{"start":{"line":39,"column":11},"end":{"line":47,"column":5}},{"start":{"line":43,"column":11},"end":{"line":47,"column":5}}],"line":39},"4":{"loc":{"start":{"line":39,"column":15},"end":{"line":39,"column":38}},"type":"binary-expr","locations":[{"start":{"line":39,"column":15},"end":{"line":39,"column":29}},{"start":{"line":39,"column":33},"end":{"line":39,"column":38}}],"line":39},"5":{"loc":{"start":{"line":43,"column":11},"end":{"line":47,"column":5}},"type":"if","locations":[{"start":{"line":43,"column":11},"end":{"line":47,"column":5}},{"start":{},"end":{}}],"line":43},"6":{"loc":{"start":{"line":50,"column":4},"end":{"line":52,"column":5}},"type":"if","locations":[{"start":{"line":50,"column":4},"end":{"line":52,"column":5}},{"start":{},"end":{}}],"line":50},"7":{"loc":{"start":{"line":50,"column":8},"end":{"line":50,"column":25}},"type":"binary-expr","locations":[{"start":{"line":50,"column":8},"end":{"line":50,"column":13}},{"start":{"line":50,"column":17},"end":{"line":50,"column":25}}],"line":50},"8":{"loc":{"start":{"line":70,"column":4},"end":{"line":72,"column":5}},"type":"if","locations":[{"start":{"line":70,"column":4},"end":{"line":72,"column":5}},{"start":{},"end":{}}],"line":70},"9":{"loc":{"start":{"line":70,"column":8},"end":{"line":70,"column":25}},"type":"binary-expr","locations":[{"start":{"line":70,"column":8},"end":{"line":70,"column":13}},{"start":{"line":70,"column":17},"end":{"line":70,"column":25}}],"line":70},"10":{"loc":{"start":{"line":75,"column":6},"end":{"line":75,"column":89}},"type":"if","locations":[{"start":{"line":75,"column":6},"end":{"line":75,"column":89}},{"start":{},"end":{}}],"line":75},"11":{"loc":{"start":{"line":86,"column":44},"end":{"line":86,"column":77}},"type":"cond-expr","locations":[{"start":{"line":86,"column":62},"end":{"line":86,"column":73}},{"start":{"line":86,"column":76},"end":{"line":86,"column":77}}],"line":86},"12":{"loc":{"start":{"line":99,"column":4},"end":{"line":101,"column":5}},"type":"if","locations":[{"start":{"line":99,"column":4},"end":{"line":101,"column":5}},{"start":{},"end":{}}],"line":99},"13":{"loc":{"start":{"line":99,"column":8},"end":{"line":99,"column":25}},"type":"binary-expr","locations":[{"start":{"line":99,"column":8},"end":{"line":99,"column":13}},{"start":{"line":99,"column":17},"end":{"line":99,"column":25}}],"line":99},"14":{"loc":{"start":{"line":114,"column":4},"end":{"line":117,"column":5}},"type":"if","locations":[{"start":{"line":114,"column":4},"end":{"line":117,"column":5}},{"start":{},"end":{}}],"line":114},"15":{"loc":{"start":{"line":114,"column":8},"end":{"line":114,"column":25}},"type":"binary-expr","locations":[{"start":{"line":114,"column":8},"end":{"line":114,"column":13}},{"start":{"line":114,"column":17},"end":{"line":114,"column":25}}],"line":114},"16":{"loc":{"start":{"line":119,"column":4},"end":{"line":122,"column":5}},"type":"if","locations":[{"start":{"line":119,"column":4},"end":{"line":122,"column":5}},{"start":{},"end":{}}],"line":119},"17":{"loc":{"start":{"line":124,"column":27},"end":{"line":124,"column":124}},"type":"cond-expr","locations":[{"start":{"line":124,"column":76},"end":{"line":124,"column":98}},{"start":{"line":124,"column":101},"end":{"line":124,"column":124}}],"line":124},"18":{"loc":{"start":{"line":128,"column":15},"end":{"line":128,"column":125}},"type":"cond-expr","locations":[{"start":{"line":128,"column":33},"end":{"line":128,"column":121}},{"start":{"line":128,"column":124},"end":{"line":128,"column":125}}],"line":128},"19":{"loc":{"start":{"line":137,"column":44},"end":{"line":137,"column":84}},"type":"cond-expr","locations":[{"start":{"line":137,"column":62},"end":{"line":137,"column":80}},{"start":{"line":137,"column":83},"end":{"line":137,"column":84}}],"line":137},"20":{"loc":{"start":{"line":155,"column":23},"end":{"line":155,"column":60}},"type":"binary-expr","locations":[{"start":{"line":155,"column":23},"end":{"line":155,"column":27}},{"start":{"line":155,"column":31},"end":{"line":155,"column":38}},{"start":{"line":155,"column":42},"end":{"line":155,"column":60}}],"line":155}},"s":{"0":1,"1":49,"2":49,"3":49,"4":49,"5":49,"6":49,"7":15,"8":0,"9":15,"10":15,"11":15,"12":15,"13":14,"14":14,"15":1,"16":1,"17":1,"18":15,"19":49,"20":21,"21":14,"22":7,"23":6,"24":6,"25":6,"26":1,"27":1,"28":1,"29":1,"30":49,"31":3,"32":1,"33":2,"34":2,"35":2,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":49,"44":4,"45":1,"46":3,"47":3,"48":4,"49":3,"50":1,"51":2,"52":2,"53":1,"54":1,"55":2,"56":1,"57":1,"58":2,"59":2,"60":2,"61":49,"62":3,"63":1,"64":2,"65":2,"66":1,"67":1,"68":2,"69":1,"70":1,"71":1,"72":1,"73":49,"74":4,"75":1,"76":1,"77":3,"78":4,"79":3,"80":1,"81":1,"82":2,"83":2,"84":2,"85":4,"86":2,"87":2,"88":4,"89":2,"90":2,"91":2,"92":2,"93":1,"94":1,"95":2,"96":1,"97":1,"98":1,"99":1,"100":1,"101":1,"102":49,"103":2,"104":49},"f":{"0":49,"1":49,"2":15,"3":21,"4":3,"5":1,"6":4,"7":4,"8":1,"9":2,"10":3,"11":1,"12":2,"13":4,"14":4,"15":4,"16":2,"17":4,"18":1,"19":2,"20":1,"21":1,"22":2},"b":{"0":[0,15],"1":[14,7],"2":[21,14],"3":[6,1],"4":[7,6],"5":[1,0],"6":[1,2],"7":[3,2],"8":[1,3],"9":[4,3],"10":[1,2],"11":[1,1],"12":[1,2],"13":[3,2],"14":[1,3],"15":[4,3],"16":[1,2],"17":[0,2],"18":[2,2],"19":[1,1],"20":[2,1,1]},"inputSourceMap":{"version":3,"sources":["C:/BestInQuest-Web/src/contexts/TasksContext.jsx"],"sourcesContent":["import { createContext, useState, useEffect, useContext, useCallback } from 'react';\r\nimport {\r\n  fetchTasksByUserId,\r\n  createTask as createTaskApi,\r\n  updateTask as updateTaskApi,\r\n  deleteTask as deleteTaskApi,\r\n  updateTaskStatus as updateTaskStatusApi,\r\n} from '../features/tasks/services/taskApi';\r\nimport { useUser } from './UserContext';\r\nimport { STATUS_OPTIONS_MAP } from '../constants';\r\n\r\nconst TasksContext = createContext();\r\n\r\nexport function useTasks() {\r\n  return useContext(TasksContext);\r\n}\r\n\r\nexport function TasksProvider ({ children }) {\r\n  const { user, isLoadingUser } = useUser();\r\n  const [tasks, setTasks] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const loadTasks = useCallback(async (userId) => {\r\n    if (!userId) return;\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const taskData = await fetchTasksByUserId(userId);\r\n      setTasks(taskData);\r\n      console.log(\"Tasks data loaded:\", taskData);\r\n    } catch (e) {\r\n      console.error(\"Failed to load tasks:\", e);\r\n      setError(e.message);\r\n      setTasks([]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (user && user.id) {\r\n      loadTasks(user.id);\r\n    } else if (!isLoadingUser && !user) {\r\n        setIsLoading(false);\r\n        setError(\"Не удалось загрузить задачи: пользователь не определен.\");\r\n        setTasks([]);\r\n    } else if (isLoadingUser) {\r\n        setIsLoading(true);\r\n        setTasks([]);\r\n        setError(null);\r\n    }\r\n  }, [user, isLoadingUser, loadTasks]);\r\n\r\n  const addTask = async (taskDataFromForm) => {\r\n    if (!user || !user.id) {\r\n      throw new Error(\"Cannot create task: user not available.\");\r\n    }\r\n    // setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const newTask = await createTaskApi(taskDataFromForm, user.id);\r\n      // setTasks(newTask);\r\n      setTasks(prevTasks => [newTask, ...prevTasks]\r\n        // .sort((a, b) => new Date(b.updateDate) - new Date(a.updateDate))// Сортировка по дате обновления\r\n      );\r\n      console.log(\"Task created:\", newTask);\r\n      return newTask;\r\n    } catch (e) {\r\n      console.error(\"Failed to add task:\", e);\r\n      setError(e.message);\r\n      throw e;\r\n    } finally {\r\n      // setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateTask = async (taskId, taskDataFromForm) => {\r\n    if (!user || !user.id) {\r\n      throw new Error(\"Cannot update task: user not available.\");\r\n    }\r\n    // setIsLoading(true);\r\n    try {\r\n      const taskToUpdate = tasks.find(t => t.id === taskId);\r\n      if (!taskToUpdate) throw new Error(`Task with ID ${taskId} not found for update.`);\r\n\r\n      const finalTaskData = {\r\n        ...taskToUpdate, // Берем текущие author, executor, status, если они не пришли из формы\r\n        ...taskDataFromForm, // Перезаписываем измененными данными из формы\r\n        id: taskId,\r\n        updateDate: new Date().toISOString(),\r\n      };\r\n\r\n      const updatedTask = await updateTaskApi(taskId, finalTaskData, user.id);\r\n      setTasks(prevTasks =>\r\n        prevTasks\r\n          .map(t => (t.id === taskId ? updatedTask : t))\r\n          // .sort((a, b) => new Date(b.updateDate) - new Date(a.updateDate)) // Сортировка\r\n      );\r\n      console.log(\"Task updated:\", updatedTask);\r\n      return updatedTask;\r\n    } catch (e) {\r\n      console.error(`Failed to update task ${taskId}:`, e);\r\n      setError(e.message);\r\n      throw e;\r\n    } finally {\r\n      // setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const deleteTask = async (taskId) => {\r\n    if (!user || !user.id) {\r\n      throw new Error(\"Cannot delete task: user not available.\");\r\n    }\r\n    // setIsLoading(true);\r\n    try {\r\n      await deleteTaskApi(taskId, user.id);\r\n      setTasks(prevTasks => prevTasks.filter(t => t.id !== taskId));\r\n      console.log(\"Task deleted:\", taskId);\r\n    } catch (e) {\r\n      console.error(`Failed to delete task ${taskId}:`, e);\r\n      setError(e.message);\r\n      throw e;\r\n    } finally {\r\n      // setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const toggleTaskStatus = async (taskId, currentStatus) => {\r\n    if (!user || !user.id) {\r\n        console.warn(\"Cannot toggle task status: user not available.\");\r\n        return;\r\n    }\r\n    const task = tasks.find(t => t.id === taskId);\r\n    if (!task) {\r\n        console.warn(`Cannot toggle task status: task ${taskId} not found.`);\r\n        return;\r\n    }\r\n\r\n    const currentStatusValue = currentStatus?.toLowerCase();\r\n    const newStatusValue = currentStatusValue === STATUS_OPTIONS_MAP.DONE\r\n        ? STATUS_OPTIONS_MAP.NEW\r\n        : STATUS_OPTIONS_MAP.DONE;\r\n\r\n    const originalTasks = tasks.map(t => ({...t})); // Глубокое копирование для отката, если понадобится\r\n    // Optimistically update UI\r\n    setTasks(prevTasks =>\r\n      prevTasks\r\n        .map(t =>\r\n          t.id === taskId ? { ...t, status: newStatusValue, updateDate: new Date().toISOString() } : t\r\n        )\r\n        // .sort((a, b) => new Date(b.updateDate) - new Date(a.updateDate)) // Сортировка\r\n    );\r\n\r\n    try {\r\n      setError(null); // Clear previous errors before API call\r\n      const updatedTaskPayload = { ...task, status: newStatusValue };\r\n      const updatedTaskFromApi = await updateTaskStatusApi(taskId, updatedTaskPayload, user.id);\r\n      // Обновляем задачу данными с сервера, чтобы иметь актуальную updateDate и другие возможные серверные изменения\r\n      setTasks(prevTasks =>\r\n        prevTasks\r\n          .map(t => (t.id === taskId ? updatedTaskFromApi : t))\r\n          .sort((a, b) => new Date(b.updateDate) - new Date(a.updateDate)) // Сортировка\r\n      );\r\n      console.log(`Task ${taskId} status toggled to ${newStatusValue}`);\r\n    } catch (error) {\r\n      setError(error.message); // Set error message on failure FIRST\r\n      console.error(`Failed to toggle task ${taskId} status:`, error);\r\n      setTasks(originalTasks.sort((a, b) => new Date(b.updateDate) - new Date(a.updateDate))); // Откат и сортировка\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    tasks,\r\n    isLoadingTasks: isLoading,\r\n    tasksError: error,\r\n    addTask,\r\n    updateTask,\r\n    deleteTask,\r\n    toggleTaskStatus,\r\n    reloadTasks: () => user && user.id && loadTasks(user.id),\r\n  };\r\n\r\n  return <TasksContext.Provider value={value}>{children}</TasksContext.Provider>;\r\n};"],"mappings":"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","names":["error"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"088d669119e040cd968ffb9b37d07fed113ad7d8"}}