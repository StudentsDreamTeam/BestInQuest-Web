name: CI/CD Pipeline
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/frontend

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Install dependencies
        run: |
          npm ci
          npm install -D @vitest/coverage-c8 @testing-library/react@experimental --legacy-peer-deps
      
      - name: Run tests with coverage
        run: npm test -- --coverage
      
      - name: Build project
        run: npm run build

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: >
            -Dsonar.organization=studentsdreamteam
            -Dsonar.projectKey=StudentsDreamTeam_BestInQuest-Web
            -Dsonar.sources=src
            -Dsonar.tests=src
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.testExecutionReportPaths=coverage/test-report.xml
            -Dsonar.coverage.exclusions=**/__mocks__/**,**/public/**,**/*.stories.*
            -Dsonar.qualitygate.wait=true
            ${{ github.event_name == 'pull_request' && format('-Dsonar.pullrequest.key={0} -Dsonar.pullrequest.branch={1}', github.event.pull_request.number, github.head_ref) || format('-Dsonar.branch.name={0}', github.ref_name) }}
      
      # - run: npm ci
      # # - run: npm run lint
      # - run: npm run build
      
      # - name: Cache SonarCloud
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.sonar/cache
      #     key: sonar-${{ github.ref }}

      # - name: SonarCloud Scan
      #   uses: SonarSource/sonarqube-scan-action@v5.0.0
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     args: >
      #       -Dsonar.organization=studentsdreamteam
      #       -Dsonar.projectKey=StudentsDreamTeam_BestInQuest-Web
      #       -Dsonar.sources=src
      #       -Dsonar.exclusions=**/__mocks__/**,**/public/**
      #       ${{ github.ref_name != 'main' && '-Dsonar.branch.name=' || '' }}${{ github.ref_name }}
          
          
  build-and-push:
    needs: analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Линтинг Dockerfile (опционально)
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          ignore: DL3018

      # Настройка Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      # Сборка образа (для всех событий)
      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: |
            frontend-image:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: ${{ github.event_name == 'pull_request' }}
          push: false

      # Запуск тестов
      # - name: Run tests
      #   run: |
      #     docker run --rm frontend-image:${{ github.sha }} \
      #       sh -c "npm run test"

      # Логин и пуш только для main/develop
      - name: Login to Docker Hub
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Пуш образов с разными тегами
      - name: Push to Docker Hub
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
            ${{ env.DOCKER_IMAGE }}:${{ github.ref_name == 'main' && 'stable' || 'staging' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true


  deploy:
    needs: build-and-push
    runs-on: self-hosted   
    env:
      DEPLOY_DIR: /opt/app  
    steps:
      - uses: actions/checkout@v4      
      - name: Deploy application
        run: |
          cd $DEPLOY_DIR
          # Останавливаем старые контейнеры (если есть)
          docker compose down --rmi all -v || true

          if docker network inspect app_network >/dev/null 2>&1; then
          docker network rm app_network || true
          fi

          docker network create app_network || true
          
          # Запускаем новые контейнеры
          docker compose up -d
          
          # Проверяем статус
          docker compose ps
